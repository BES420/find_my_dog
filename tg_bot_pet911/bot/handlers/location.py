from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from tg_bot_pet911.app.models import PetLocation
from tg_bot_pet911.keyboards.inline import get_photos_keyboard, get_location_keyboard
from tg_bot_pet911.states.pet_states import PetRegistration


router = Router()


@router.callback_query(PetRegistration.entering_location, F.data == "location:geo")
async def process_geo_location_request(callback: CallbackQuery, state: FSMContext):
    """Handle request to send geolocation."""
    await callback.message.edit_text(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –≤—ã –Ω–∞—à–ª–∏ –ø–∏—Ç–æ–º—Ü–∞.\n\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É (üìé) –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    # We stay in the same state, but expect a location message
    await callback.answer()


@router.message(PetRegistration.entering_location, F.location)
async def process_geo_location(message: Message, state: FSMContext):
    """Handle geolocation message."""
    # Get current state data
    data = await state.get_data()
    pet_info_dict = data.get("pet_info", {})
    
    # Create location object
    location = PetLocation(
        latitude=message.location.latitude,
        longitude=message.location.longitude
    )
    
    # Update pet_info with location
    if "location" not in pet_info_dict:
        pet_info_dict["location"] = {}
    
    pet_info_dict["location"] = location.model_dump()
    
    # Save updated pet_info back to state
    await state.update_data(pet_info=pet_info_dict)
    
    # Move to comment step
    await message.answer(
        "‚úÖ –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø–∏—Ç–æ–º—Ü–µ: –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ª–∏—á–∏–µ –æ—à–µ–π–Ω–∏–∫–∞ –∏ —Ç.–¥.\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."
    )
    
    # Set state to entering comment
    await state.set_state(PetRegistration.entering_comment)


@router.callback_query(PetRegistration.entering_location, F.data == "location:manual")
async def process_manual_location_request(callback: CallbackQuery, state: FSMContext):
    """Handle request to manually enter location."""
    await callback.message.edit_text(
        "üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤—ã –Ω–∞—à–ª–∏ –ø–∏—Ç–æ–º—Ü–∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10"
    )
    # We stay in the same state, but expect a text message with address
    await callback.answer()


@router.message(PetRegistration.entering_location, F.text)
async def process_manual_location(message: Message, state: FSMContext):
    """Handle manual address entry."""
    address = message.text.strip()
    
    if not address:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.\n"
            "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."
        )
        return
    
    # Get current state data
    data = await state.get_data()
    pet_info_dict = data.get("pet_info", {})
    
    # Create location object
    location = PetLocation(address=address)
    
    # Update pet_info with location
    if "location" not in pet_info_dict:
        pet_info_dict["location"] = {}
    
    pet_info_dict["location"] = location.model_dump()
    
    # Save updated pet_info back to state
    await state.update_data(pet_info=pet_info_dict)
    
    # Move to comment step
    await message.answer(
        f"‚úÖ –ê–¥—Ä–µ—Å '{address}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø–∏—Ç–æ–º—Ü–µ: –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ª–∏—á–∏–µ –æ—à–µ–π–Ω–∏–∫–∞ –∏ —Ç.–¥.\n"
        f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."
    )
    
    # Set state to entering comment
    await state.set_state(PetRegistration.entering_comment)


@router.callback_query(PetRegistration.entering_location, F.data == "back")
async def back_to_photos(callback: CallbackQuery, state: FSMContext):
    """Return to photo upload."""
    # Get current state data
    data = await state.get_data()
    pet_info_dict = data.get("pet_info", {})
    
    # Clear location if it was set
    if "location" in pet_info_dict:
        pet_info_dict["location"] = {}
        await state.update_data(pet_info=pet_info_dict)
    
    # Move back to photo upload
    await callback.message.edit_text(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'.",
        reply_markup=get_photos_keyboard()
    )
    
    # Set state back to uploading photos
    await state.set_state(PetRegistration.uploading_photos)
    await callback.answer() 